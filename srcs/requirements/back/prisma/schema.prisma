datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  login       String
  lastName    String
  firstName   String
  imageLink   String
  username    String
  doubleAuth  String
  friends     String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wins        GameSessionOutcome[] @relation("userWins")
  losses      GameSessionOutcome[] @relation("userLosses")
  games1      GameSessionOutcome[] @relation("userGames1")
  games2      GameSessionOutcome[] @relation("userGames2")
  channelUsers  ChannelUser[]      @relation("user")
  invitations   invitation[]       @relation("invitedRelation")
}

model Token2FA {
  id          Int     @unique
  value       String
}

model invitation {
  id                     Int      @id @default(autoincrement())
  type                   String
  whereID                 Int
  whoInviteUserName      String
  invitedID              Int             @default(-1)
  invited                User  @relation("invitedRelation", fields: [invitedID], references: [id])

}

model textChannel {
  id        Int      @id @default(autoincrement())
  name      String
  text      String
  channelUserId     Int          @default(-1)
  channelUser       ChannelUser  @relation("userText", fields: [channelUserId], references: [id])
  channelId         Int          @default(-1)
  channel           Channel      @relation("channel", fields: [channelId], references: [id])
}

model block {
  id                Int          @id @default(autoincrement())
  blockedUserId     Int
  blockerUserId     Int
  blockerChannelUserId  Int @default(-1)
  blockedChannelUserId  Int @default(-1)
  blockedBy         ChannelUser  @relation("BlockedByRelation", fields: [blockerChannelUserId], references: [id])
  blockedUser       ChannelUser  @relation("BlockedUserRelation", fields: [blockedChannelUserId], references: [id])
}

model ChannelUser {
  id              Int      @id @default(autoincrement())
  clientId        String
  userName        String   @default("unknown")
  status          String   @default("user")

  userID      Int     @default(-1)
  user        User    @relation("user", fields: [userID], references: [id])

  //punishment
  muted           Boolean  @default(false)
  kicked          Boolean  @default(false)
  banned          Boolean  @default(false)
  //punishment duration
  muteExpiration DateTime?
  kickExpiration DateTime?
  banExpiration DateTime?

  blockedBy       block[]    @relation("BlockedByRelation")
  blockedUser     block[]    @relation("BlockedUserRelation")
  texts           textChannel[] @relation("userText")

  channelId      Int        @default(-1)
  channel        Channel    @relation(fields: [channelId], references: [id])

}

model Channel {
  id               Int      @id  @default(autoincrement())
  status           String        @default("public")
  ChannelName      String
  password         String        @default("")
  users            ChannelUser[]
  textChannels     textChannel[] @relation("channel")
}


model GameSessionOutcome {
  id       Int    @id @default(autoincrement())
  userID1  User   @relation("userGames1", fields: [user1Id], references: [id])
  user1Id  Int
  userID2  User   @relation("userGames2", fields: [user2Id], references: [id])
  user2Id  Int
  winner   User   @relation("userWins", fields: [winnerId], references: [id])
  winnerId Int
  loser    User   @relation("userLosses", fields: [loserId], references: [id])
  loserId  Int
}